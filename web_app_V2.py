# AUTOGENERATED! DO NOT EDIT! File to edit: web_app_V2.ipynb.

# %% auto 0
__all__ = []

# %% web_app_V2.ipynb 5
import pandas as pd
import numpy as np
import streamlit as st
from datetime import datetime
import json
import joblib
from sklearn.preprocessing import StandardScaler


st.title("D√©tection de faux billets üíµ")
st.markdown(
    """

Bienvenue dans l'application web simplifi√©e de d√©tection de faux billets.

Cette application aide √† pr√©dire si un billet sera faux ou vrai selon ses caract√©ristiques.
Veuillez svp d√©poser le fichier CSV et le mod√®le JSON avant de pouvoir faire votre s√©lection au sein des variables en side-bar (gauche) pour obtenir votre r√©sultat.

"""
)

uploaded_file = st.sidebar.file_uploader(label="D√©posez le fichier CSV 'dataframe_final' ici (ou tout autre fichier CSV respectant la forme souhait√©e)", type = ['csv'])
if uploaded_file is not None:
    df = pd.read_csv(uploaded_file, encoding='utf-8', sep=';')

else:
    st.title("‚ö†Ô∏è Attention, veuillez d√©poser un fichier")

uploaded_model = st.sidebar.file_uploader(label="D√©posez le fichier JOBLIB 'modele_regression' ici")
if uploaded_model is not None:
    regression = joblib.load(uploaded_model)
    
else:
    st.title("‚ö†Ô∏è Attention, veuillez d√©poser un mod√®le")

    
st.sidebar.header("Les param√®tres du billet √† l'√©tude")

def user_input():
    
    diagonal = st.sidebar.slider('Diagonale du billet', 171.04, 173.01, 171.04)
    height_left = st.sidebar.slider('Hauteur gauche du billet', 103.14, 104.88, 103.14)
    height_right = st.sidebar.slider('Hauteur droite du billet', 102.82, 104.95, 102.82)
    margin_low = st.sidebar.slider('Marge basse du billet', 2.98, 6.90, 2.98)
    margin_up = st.sidebar.slider('Marge haute du billet', 2.27, 3.91, 2.27)
    length = st.sidebar.slider('Longueur du billet', 109.49, 114.44, 109.49)
    
    data={
        'diagonal':diagonal,
        'height_left': height_left,
        'height_right': height_right,
        'margin_low': margin_low,
        'margin_up': margin_up,
        'length': length
    }
    
    billet_parametres=pd.DataFrame(data, index=[0])
    
    return billet_parametres

df_ = user_input()


st.subheader('On veut trouver si notre billet (avec les caract√©ristiques suivantes) est vrai ou faux')
st.write(df_.iloc[:,0:6])

#Standardisation des valeurs
scaler = StandardScaler()
scaler.fit(df.drop(['id'], axis=1))
X_csv_scaled = scaler.transform(df_)
X_csv_std = pd.DataFrame(X_csv_scaled, columns=(df.drop(['id'], axis=1)).columns)

# Pr√©diction avec le mod√®le
y_pred = regression.predict(X_csv_std)
predictions = pd.DataFrame(y_pred, columns=['Pr√©diction'])
predictions['Pr√©diction'] = predictions['Pr√©diction'].replace({False: 'Faux billet', True: 'Vrai billet'})
predictions['Probabilit√© de faux'] = regression.predict_proba(X_csv_std)[:, 0]
predictions['Probabilit√© de vrai'] = regression.predict_proba(X_csv_std)[:, 1]

st.subheader('La pr√©diction du billet est:')
st.write(predictions)
