# AUTOGENERATED! DO NOT EDIT! File to edit: web_app_V2.ipynb.

# %% auto 0
__all__ = []

# %% web_app_V2.ipynb 5
import pandas as pd
import streamlit as st
from datetime import datetime
import json
import joblib


st.title("D√©tection de faux billets üíµ")
st.markdown(
    """

Bienvenue dans l'application web simplifi√©e de d√©tection de faux billets.

Cette application aide √† pr√©dire si un billet sera faux ou vrai selon ses caract√©ristiques.
Veuillez svp d√©poser le fichier CSV et le mod√®le JSON avant de pouvoir faire votre s√©lection au sein des variables en side-bar pour obtenir votre r√©sultat.

"""
)

uploaded_file = st.sidebar.file_uploader(label="D√©posez le fichier CSV 'jeu_final_predictions' ici", type = ['csv'])
if uploaded_file is not None:
    df = pd.read_csv(uploaded_file, encoding='utf-8', sep=';')

else:
    st.title("‚ö†Ô∏è Attention, veuillez d√©poser un fichier")

uploaded_model = st.sidebar.file_uploader(label="D√©posez le fichier JSON 'model_trained' ici", type = ['json'])
if uploaded_model is not None:
    
    export_dict = json.load(uploaded_model)
    model_path = export_dict["0"]
    regression = joblib.load(model_path)
    st.write(regression)
    
#     json=pd.read_json(file)
#     df=pd.json_normalize(
#     # Charger le dictionnaire √† partir du fichier JSON
#     with open(uploaded_model, "r") as file:
#         export_dict = json.load(file)
#     model_path = export_dict["0"]
#     regression = joblib.load(model_path)
    

else:
    st.title("‚ö†Ô∏è Attention, veuillez d√©poser un mod√®le")

st.sidebar.header("Les param√®tres du billet √† l'√©tude")

def user_input():
    

    diagonal = st.sidebar.selectbox('Diagonale du billet', options=df['diagonal'].values, index=0)
    height_left = st.sidebar.selectbox('Hauteur gauche du billet', options=df['height_left'].values, index=0)
    height_right = st.sidebar.selectbox('Hauteur droite du billet', options=df['height_right'].values, index=0)
    margin_low = st.sidebar.selectbox('Marge basse du billet', options=df['margin_low'].values, index=0)
    margin_up = st.sidebar.selectbox('Marge haute du billet', options=df['margin_up'].values, index=0)
    length = st.sidebar.selectbox('Longueur du billet', options=df['length'].values, index=0)
    
    data={
        'diagonal':diagonal,
        'height_left': height_left,
        'height_right': height_right,
        'margin_low': margin_low,
        'margin_up': margin_up,
        'length': length
    }
    
    billet_parametres=pd.DataFrame(data, index=[0])
    
    return billet_parametres

df_=user_input()


st.subheader('On veut trouver si notre billet (avec les caract√©ristiques suivantes) est vrai ou faux')
st.write(df_.iloc[:,0:6])

st.subheader('La pr√©diction du billet est:')

merged_df = df.merge(df_, on=['diagonal', 'height_left', 'height_right', 'margin_low', 'margin_up', 'length'], how='inner')
selected_columns = merged_df.iloc[:,7:11]
st.write(selected_columns)
